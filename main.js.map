{"version":3,"sources":["webpack:////home/ben/work/ngx-auto-table/dist/ngx-auto-table/fesm5/ngx-auto-table.js","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACK;AACA;AAC8B;AAC2R;AACzU;AACmC;AACR;AACP;AACyC;;AAE5F;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,yCAAyC,uBAAuB,SAAS,kBAAkB,6BAA6B,SAAS;AACjI,iBAAiB;AACjB;AACA;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAW;AAC5C;AACA,qCAAqC,uEAAc;AACnD,mCAAmC,uEAAc;AACjD,gCAAgC,4CAAO;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,6DAAM;AACxB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,YAAY,EAAE;AACpC,kBAAkB,gEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,yDAAyD,6BAA6B;AACtF,mCAAmC,oEAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,gEAAS;AAC/B;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,gCAAgC,oCAAoC,EAAE;AACtE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB,gEAAS;AAC/B;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,8BAA8B,sDAAQ,yCAAyC,UAAU;AACzF;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,0BAA0B,6BAA6B,EAAE;AACzD;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,kBAAkB,EAAE;AAC5C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,gBAAgB,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,sDAAQ,GAAG,kCAAkC,WAAW;AAC3E,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,kDAAkD,EAAE;AAC1E;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,iDAAiD,EAAE;AACzE;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,wCAAwC,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,sDAAsD;AACtD;AACA,qDAAqD;AACrD,gBAAgB;AAChB;AACA;AACA,qDAAqD;AACrD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qBAAqB,iBAAiB;AACtC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eA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","file":"main.js","sourcesContent":["import { CsvModule } from '@ctrl/ngx-csv';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { __spread, __values, __assign, __awaiter, __generator } from 'tslib';\nimport { MatTableDataSource, MatPaginator, MatSort, MatAutocompleteModule, MatButtonModule, MatButtonToggleModule, MatPaginatorModule, MatCheckboxModule, MatFormFieldModule, MatIconModule, MatInputModule, MatProgressBarModule, MatProgressSpinnerModule, MatSelectModule, MatSortModule, MatTableModule, MatToolbarModule, MatMenuModule } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Component, Input, ViewChild, Output, EventEmitter, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AppExportCsvExportComponent = /** @class */ (function () {\n    function AppExportCsvExportComponent() {\n    }\n    AppExportCsvExportComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'app-table-csv-export',\n                    template: \"\\n    <a\\n      *ngIf=\\\"dataArray\\\"\\n      csvLink\\n      [data]=\\\"dataArray\\\"\\n      [filename]=\\\"filename\\\"\\n      mat-raised-button\\n    >\\n      <mat-icon title=\\\"Export as CSV\\\">file_download</mat-icon>\\n      <span>Export CSV</span>\\n    </a>\\n  \",\n                    styles: [\"\\n      a {\\n        color: black;\\n      }\\n      mat-icon {\\n        padding-right: 5px;\\n      }\\n    \"]\n                }] }\n    ];\n    AppExportCsvExportComponent.propDecorators = {\n        dataArray: [{ type: Input }],\n        filename: [{ type: Input }]\n    };\n    return AppExportCsvExportComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nvar AutoTableComponent = /** @class */ (function () {\n    function AutoTableComponent() {\n        this.selectedBulk = new EventEmitter();\n        this.columnDefinitions = {};\n        this.columnDefinitionsAll = {};\n        this.columnDefinitionsAllArray = [];\n        this.headerKeysAll = [];\n        this.headerKeysAllVisible = [];\n        this.headerKeysDisplayed = [];\n        this.headerKeysDisplayedMap = {};\n        this.pageSize = 25;\n        this.filterControl = new FormControl();\n        // Bulk items selection\n        this.selectionMultiple = new SelectionModel(true, []);\n        this.selectionSingle = new SelectionModel(false, []);\n        this.$onDestroyed = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    AutoTableComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.config.data$\n            .pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) { return !!e; })))\n            .pipe(takeUntil(this.$onDestroyed))\n            .subscribe((/**\n         * @param {?} originalData\n         * @return {?}\n         */\n        function (originalData) {\n            console.log(\"ngx-auto-table, subscribed: \", { originalData: originalData });\n            _this.dataSource = new MatTableDataSource(originalData);\n            _this.dataSource.paginator = _this.paginator;\n            _this.dataSource.sort = _this.sort;\n            if (originalData && !originalData.length) {\n                _this.hasNoItems = true;\n                return;\n            }\n            else {\n                _this.hasNoItems = false;\n            }\n            if (_this.config.pageSize) {\n                _this.pageSize = _this.config.pageSize;\n            }\n            /** @type {?} */\n            var firstDataItem = originalData[0];\n            _this.initDisplayedColumns(firstDataItem);\n            _this.initExport(originalData);\n            _this.initFilter(originalData);\n        }));\n        if (this.config.$triggerSelectItem) {\n            this.config.$triggerSelectItem\n                .pipe(takeUntil(this.$onDestroyed))\n                .subscribe((/**\n             * @param {?} item\n             * @return {?}\n             */\n            function (item) {\n                _this.log(\"$triggerSelectItem\", item);\n                /** @type {?} */\n                var str = JSON.stringify(item);\n                /** @type {?} */\n                var foundItem = _this.dataSource.data.find((/**\n                 * @param {?} row\n                 * @return {?}\n                 */\n                function (row) { return JSON.stringify(row) === str; }));\n                if (foundItem) {\n                    _this.selectionSingle.select(foundItem);\n                }\n            }));\n        }\n        if (this.config.clearSelected) {\n            this.config.clearSelected\n                .pipe(takeUntil(this.$onDestroyed))\n                .subscribe((/**\n             * @return {?}\n             */\n            function () {\n                _this.log(\"clearSelected\");\n                _this.selectionMultiple.clear();\n                _this.selectionSingle.clear();\n            }));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AutoTableComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.$onDestroyed.next();\n        this.$onDestroyed.complete();\n    };\n    /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n    AutoTableComponent.prototype.applyFilter = /**\n     * @param {?} filterValue\n     * @return {?}\n     */\n    function (filterValue) {\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n        this.selectionMultiple.clear();\n        this.selectionSingle.clear();\n    };\n    /**\n     * @param {?} originalData\n     * @return {?}\n     */\n    AutoTableComponent.prototype.initFilter = /**\n     * @param {?} originalData\n     * @return {?}\n     */\n    function (originalData) {\n        if (!originalData.length) {\n            return;\n        }\n        /** @type {?} */\n        var firstRow = originalData[0];\n        /** @type {?} */\n        var keysData = new Set(Object.keys(firstRow));\n        /** @type {?} */\n        var keysHeader = new Set(this.headerKeysDisplayed);\n        keysHeader.delete(\"__bulk\");\n        keysHeader.delete(\"__star\");\n        /** @type {?} */\n        var allFieldsExist = Array.from(keysHeader).reduce((/**\n         * @param {?} acc\n         * @param {?} cur\n         * @return {?}\n         */\n        function (acc, cur) {\n            return keysData.has(cur) && acc;\n        }), true);\n        this.log(\"initFilter()\", {\n            rowFields: keysData,\n            allFieldsExist: allFieldsExist,\n            headerKeysDisplayed: this.headerKeysDisplayed\n        });\n        this.dataSource.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filterText\n         * @return {?}\n         */\n        function (data, filterText) {\n            var e_1, _a;\n            if (!filterText) {\n                return true;\n            }\n            if (!allFieldsExist) {\n                /** @type {?} */\n                var lower = JSON.stringify(data).toLowerCase();\n                return lower.includes(filterText);\n            }\n            try {\n                for (var _b = __values(Array.from(keysHeader)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var key = _c.value;\n                    /** @type {?} */\n                    var dataVal = data[key];\n                    /** @type {?} */\n                    var str = JSON.stringify(dataVal);\n                    /** @type {?} */\n                    var isFound = str.toLowerCase().includes(filterText);\n                    if (isFound) {\n                        return true;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    };\n    /**\n     * @param {?} originalData\n     * @return {?}\n     */\n    AutoTableComponent.prototype.initExport = /**\n     * @param {?} originalData\n     * @return {?}\n     */\n    function (originalData) {\n        var _this = this;\n        this.exportFilename = this.config.exportFilename;\n        if (!this.exportFilename) {\n            return;\n        }\n        this.exportData = originalData.map((/**\n         * @param {?} dataItem\n         * @return {?}\n         */\n        function (dataItem) {\n            if (!_this.config.exportRowFormat) {\n                return dataItem;\n            }\n            return _this.config.exportRowFormat(dataItem);\n        }));\n    };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    AutoTableComponent.prototype.getKeyHeader = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        /** @type {?} */\n        var inputDef = this.columnDefinitions[key];\n        if (inputDef && inputDef.header != null) {\n            return inputDef.header;\n        }\n        return this.toTitleCase(key);\n    };\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    AutoTableComponent.prototype.toTitleCase = /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) {\n        return str.replace(\"_\", \" \").replace(/\\w\\S*/g, (/**\n         * @param {?} txt\n         * @return {?}\n         */\n        function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }));\n    };\n    /**\n     * @param {?} firstDataItem\n     * @return {?}\n     */\n    AutoTableComponent.prototype.initDisplayedColumns = /**\n     * @param {?} firstDataItem\n     * @return {?}\n     */\n    function (firstDataItem) {\n        this.initColumnDefinitions(firstDataItem);\n        this.headerKeysAll = Object.keys(this.columnDefinitionsAll);\n        this.headerKeysAllVisible = this.headerKeysAll;\n        if (this.config.hideFields) {\n            // Hide fields if specified\n            /** @type {?} */\n            var hideFields_1 = new Set(this.config.hideFields);\n            this.headerKeysAllVisible = this.headerKeysAll.filter((/**\n             * @param {?} x\n             * @return {?}\n             */\n            function (x) { return !hideFields_1.has(x); }));\n        }\n        /** @type {?} */\n        var displayed = this.columnDefinitionsAllArray\n            .filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return !def.hide; }))\n            .map((/**\n         * @param {?} d\n         * @return {?}\n         */\n        function (d) { return d.field; }));\n        this.setDisplayedColumns(displayed);\n        // Set currently enabled items\n        this.filterControl.setValue(this.headerKeysDisplayed);\n    };\n    /**\n     * @param {?} firstDataItem\n     * @return {?}\n     */\n    AutoTableComponent.prototype.initColumnDefinitions = /**\n     * @param {?} firstDataItem\n     * @return {?}\n     */\n    function (firstDataItem) {\n        var _this = this;\n        // Set all column defintions, which were explicitly set in config\n        /** @type {?} */\n        var inputDefintionFields = Object.keys(this.columnDefinitions);\n        inputDefintionFields.forEach((/**\n         * @param {?} field\n         * @return {?}\n         */\n        function (field) {\n            /** @type {?} */\n            var inputDefintion = _this.columnDefinitions[field];\n            _this.columnDefinitionsAll[field] = {\n                header: _this.getKeyHeader(field),\n                template: inputDefintion.template,\n                hide: inputDefintion.hide,\n                forceWrap: inputDefintion.forceWrap\n            };\n        }));\n        // Set all column defintions read from the \"input data\"\n        /** @type {?} */\n        var inputDataKeys = Object.keys(firstDataItem);\n        inputDataKeys.forEach((/**\n         * @param {?} field\n         * @return {?}\n         */\n        function (field) {\n            if (!!_this.columnDefinitionsAll[field]) {\n                // skip if definition exists\n                return;\n            }\n            _this.columnDefinitionsAll[field] = {\n                header: _this.toTitleCase(field),\n                hide: true\n            };\n        }));\n        this.columnDefinitionsAllArray = Object.keys(this.columnDefinitionsAll).map((/**\n         * @param {?} k\n         * @return {?}\n         */\n        function (k) {\n            return __assign({}, _this.columnDefinitionsAll[k], { field: k });\n        }));\n        this.log(\"initColumnDefinitions\", {\n            firstDataItem: firstDataItem,\n            inputDefintionFields: inputDefintionFields\n        });\n    };\n    // Sets the displayed columns from a set of fieldnames\n    // Sets the displayed columns from a set of fieldnames\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    AutoTableComponent.prototype.setDisplayedColumns = \n    // Sets the displayed columns from a set of fieldnames\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    function (selected) {\n        var _this = this;\n        // Initialize all keys as false\n        this.headerKeysAllVisible.forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        function (k) { return (_this.headerKeysDisplayedMap[k] = false); }));\n        // Set selected as true\n        selected.forEach((/**\n         * @param {?} c\n         * @return {?}\n         */\n        function (c) { return (_this.headerKeysDisplayedMap[c] = true); }));\n        this.headerKeysDisplayed = Object.keys(this.headerKeysDisplayedMap).filter((/**\n         * @param {?} k\n         * @return {?}\n         */\n        function (k) { return _this.headerKeysDisplayedMap[k]; }));\n        // Add bulk select column at start\n        if (this.config.actionsBulk) {\n            this.headerKeysDisplayed.unshift(\"__bulk\");\n        }\n        // Add actions column at end\n        if (this.config.actions) {\n            this.headerKeysDisplayed.push(\"__star\");\n        }\n    };\n    /** Whether the number of selected elements matches the total number of rows. */\n    /**\n     * Whether the number of selected elements matches the total number of rows.\n     * @return {?}\n     */\n    AutoTableComponent.prototype.isAllSelected = /**\n     * Whether the number of selected elements matches the total number of rows.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var numSelected = this.selectionMultiple.selected.length;\n        /** @type {?} */\n        var numRows = this.config.bulkSelectMaxCount || this.dataSource.filteredData.length;\n        return numSelected >= numRows;\n    };\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\n    /**\n     * Selects all rows if they are not all selected; otherwise clear selection.\n     * @return {?}\n     */\n    AutoTableComponent.prototype.masterToggle = /**\n     * Selects all rows if they are not all selected; otherwise clear selection.\n     * @return {?}\n     */\n    function () {\n        this.isAllSelected() ? this.selectionMultiple.clear() : this.selectAll();\n        this.selectedBulk.emit(this.selectionMultiple.selected);\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    AutoTableComponent.prototype.selectAll = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.dataSource.sortData(this.dataSource.filteredData, this.dataSource.sort);\n        /** @type {?} */\n        var cutArray = this.dataSource.filteredData;\n        if (this.config.bulkSelectMaxCount) {\n            cutArray = this.dataSource.filteredData.slice(0, this.config.bulkSelectMaxCount);\n        }\n        cutArray.forEach((/**\n         * @param {?} row\n         * @return {?}\n         */\n        function (row) {\n            _this.selectionMultiple.select(row);\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    AutoTableComponent.prototype.isMaxReached = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.config.bulkSelectMaxCount) {\n            return false;\n        }\n        return (this.selectionMultiple.selected.length >= this.config.bulkSelectMaxCount);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    AutoTableComponent.prototype.onColumnFilterChange = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        console.log({ $event: $event });\n        /** @type {?} */\n        var selectedValues = this.filterControl.value;\n        this.setDisplayedColumns(selectedValues);\n        this.initFilter(this.dataSource.data);\n    };\n    /**\n     * @param {?} $event\n     * @param {?} item\n     * @return {?}\n     */\n    AutoTableComponent.prototype.onClickBulkItem = /**\n     * @param {?} $event\n     * @param {?} item\n     * @return {?}\n     */\n    function ($event, item) {\n        if ($event) {\n            /** @type {?} */\n            var isSelected = this.selectionMultiple.isSelected(item);\n            if (!this.isMaxReached()) {\n                this.selectionMultiple.toggle(item);\n            }\n            else {\n                if (isSelected) {\n                    this.selectionMultiple.deselect(item);\n                }\n                else {\n                    this.warn();\n                }\n            }\n            this.selectedBulk.emit(this.selectionMultiple.selected);\n        }\n    };\n    /**\n     * @param {?} $event\n     * @param {?} row\n     * @return {?}\n     */\n    AutoTableComponent.prototype.onClickRow = /**\n     * @param {?} $event\n     * @param {?} row\n     * @return {?}\n     */\n    function ($event, row) {\n        if (this.config.onSelectItem) {\n            this.log(\"onClickRow()\", { $event: $event, row: row });\n            this.selectionSingle.select(row);\n            this.config.onSelectItem(row);\n        }\n    };\n    /**\n     * @param {?} $event\n     * @param {?} row\n     * @return {?}\n     */\n    AutoTableComponent.prototype.onDoubleClickRow = /**\n     * @param {?} $event\n     * @param {?} row\n     * @return {?}\n     */\n    function ($event, row) {\n        if (this.config.onSelectItemDoubleClick) {\n            this.log(\"onDoubleClickRow()\", { $event: $event, row: row });\n            this.selectionSingle.select(row);\n            this.config.onSelectItemDoubleClick(row);\n        }\n    };\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    AutoTableComponent.prototype.onClickBulkAction = /**\n     * @param {?} action\n     * @return {?}\n     */\n    function (action) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, action.onClick(this.selectionMultiple.selected)];\n                    case 1:\n                        _a.sent();\n                        this.selectionMultiple.clear();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @param {?} str\n     * @param {?=} obj\n     * @return {?}\n     */\n    AutoTableComponent.prototype.log = /**\n     * @param {?} str\n     * @param {?=} obj\n     * @return {?}\n     */\n    function (str, obj) {\n        if (this.config.debug) {\n            console.log(\"<ngx-auto-table> : \" + str, obj);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AutoTableComponent.prototype.warn = /**\n     * @return {?}\n     */\n    function () { };\n    AutoTableComponent.decorators = [\n        { type: Component, args: [{\n                    selector: \"ngx-auto-table\",\n                    template: \"<div\\r\\n  class=\\\"table-header auto-elevation overflow-hidden\\\"\\r\\n  [class.addRightPixel]=\\\"config.hideHeader\\\"\\r\\n  *ngIf=\\\"(!config.hideFilter || !config.hideChooseColumns) && !hasNoItems\\\"\\r\\n>\\r\\n  <div class=\\\"relative\\\">\\r\\n    <mat-toolbar class=\\\"mat-elevation-z8\\\">\\r\\n      <mat-toolbar-row class=\\\"flex-h align-center space-between\\\">\\r\\n        <mat-form-field\\r\\n          class=\\\"filter-search\\\"\\r\\n          *ngIf=\\\"!hasNoItems && !config.hideFilter\\\"\\r\\n        >\\r\\n          <mat-icon matPrefix>search</mat-icon>\\r\\n          <input\\r\\n            matInput\\r\\n            (keyup)=\\\"applyFilter($event.target.value)\\\"\\r\\n            [placeholder]=\\\"this.config.filterText || 'Search Rows...'\\\"\\r\\n            #filterField\\r\\n          />\\r\\n          <mat-icon\\r\\n            class=\\\"has-pointer\\\"\\r\\n            matSuffix\\r\\n            (click)=\\\"filterField.value = ''; applyFilter(filterField.value)\\\"\\r\\n            >clear</mat-icon\\r\\n          >\\r\\n        </mat-form-field>\\r\\n        <mat-form-field\\r\\n          class=\\\"filter-columns overflow-hidden\\\"\\r\\n          *ngIf=\\\"!hasNoItems && !config.hideChooseColumns\\\"\\r\\n        >\\r\\n          <mat-icon matPrefix>view_column</mat-icon>\\r\\n          <mat-select\\r\\n            placeholder=\\\"Choose Columns...\\\"\\r\\n            [formControl]=\\\"filterControl\\\"\\r\\n            (selectionChange)=\\\"onColumnFilterChange($event)\\\"\\r\\n            multiple\\r\\n          >\\r\\n            <mat-option *ngFor=\\\"let key of headerKeysAllVisible\\\" [value]=\\\"key\\\">\\r\\n              {{ getKeyHeader(key) }}\\r\\n            </mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </mat-toolbar-row>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar\\r\\n      class=\\\"bulk-actions flex-h align-center mat-primary\\\"\\r\\n      *ngIf=\\\"config.actionsBulk\\\"\\r\\n      [class.hidden]=\\\"!selectionMultiple.hasValue()\\\"\\r\\n    >\\r\\n      <mat-toolbar-row class=\\\"flex-h align-center space-between\\\">\\r\\n        <span class=\\\"item-count\\\">\\r\\n          ({{ selectionMultiple.selected.length }} Items Selected)\\r\\n          {{ isMaxReached() ? \\\" Max Reached!\\\" : \\\"\\\" }}\\r\\n        </span>\\r\\n        <span class=\\\"buttons flex-h align-center\\\">\\r\\n          <button\\r\\n            mat-raised-button\\r\\n            *ngFor=\\\"let action of config.actionsBulk\\\"\\r\\n            (click)=\\\"onClickBulkAction(action)\\\"\\r\\n          >\\r\\n            <mat-icon>{{ action.icon }}</mat-icon>\\r\\n            <span>{{ action.label }}</span>\\r\\n          </button>\\r\\n        </span>\\r\\n      </mat-toolbar-row>\\r\\n    </mat-toolbar>\\r\\n  </div>\\r\\n</div>\\r\\n<table\\r\\n  mat-table\\r\\n  #table\\r\\n  matSort\\r\\n  [matSortActive]=\\\"config.initialSort\\\"\\r\\n  [matSortDirection]=\\\"config.initialSortDir\\\"\\r\\n  [dataSource]=\\\"this.dataSource\\\"\\r\\n  style=\\\"width:100%;\\\"\\r\\n  class=\\\"mat-elevation-z8\\\"\\r\\n>\\r\\n  <ng-container\\r\\n    *ngFor=\\\"let def of columnDefinitionsAllArray\\\"\\r\\n    [matColumnDef]=\\\"def.field\\\"\\r\\n  >\\r\\n    <th mat-header-cell mat-sort-header *matHeaderCellDef>{{ def.header }}</th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n      <div *ngIf=\\\"!def.template\\\" [class.break-words]=\\\"def.forceWrap\\\">\\r\\n        {{ row[def.field] }}\\r\\n      </div>\\r\\n      <div *ngIf=\\\"def.template\\\">\\r\\n        <div\\r\\n          *ngTemplateOutlet=\\\"def.template; context: { $implicit: row }\\\"\\r\\n        ></div>\\r\\n      </div>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"__bulk\\\" stickyEnd>\\r\\n    <th mat-header-cell *matHeaderCellDef>\\r\\n      <mat-checkbox\\r\\n        (change)=\\\"$event ? masterToggle() : null\\\"\\r\\n        [checked]=\\\"selectionMultiple.hasValue() && isAllSelected()\\\"\\r\\n        [indeterminate]=\\\"selectionMultiple.hasValue() && !isAllSelected()\\\"\\r\\n      >\\r\\n      </mat-checkbox>\\r\\n    </th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n      <mat-checkbox\\r\\n        (click)=\\\"$event.stopPropagation()\\\"\\r\\n        (change)=\\\"onClickBulkItem($event, row)\\\"\\r\\n        [checked]=\\\"selectionMultiple.isSelected(row)\\\"\\r\\n      >\\r\\n      </mat-checkbox>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"__star\\\" stickyEnd>\\r\\n    <th mat-header-cell *matHeaderCellDef></th>\\r\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n      <div *ngIf=\\\"config.actions\\\">\\r\\n        <mat-icon\\r\\n          mat-list-icon\\r\\n          class=\\\"more-icon has-pointer\\\"\\r\\n          [matMenuTriggerFor]=\\\"rowMenu\\\"\\r\\n          >more_vert</mat-icon\\r\\n        >\\r\\n        <mat-menu #rowMenu=\\\"matMenu\\\" class=\\\"row-menu\\\">\\r\\n          <div mat-menu-item *ngFor=\\\"let action of config.actions\\\">\\r\\n            <button\\r\\n              mat-menu-item\\r\\n              *ngIf=\\\"action.onClick\\\"\\r\\n              (click)=\\\"action.onClick(row)\\\"\\r\\n            >\\r\\n              <mat-icon>{{ action.icon }}</mat-icon>\\r\\n              <span>{{ action.label }}</span>\\r\\n            </button>\\r\\n            <a\\r\\n              mat-menu-item\\r\\n              *ngIf=\\\"action.onRouterLink && !action.routerLinkQuery\\\"\\r\\n              [routerLink]=\\\"['/' + action.onRouterLink(row)]\\\"\\r\\n            >\\r\\n              <mat-icon>{{ action.icon }}</mat-icon>\\r\\n              <span>{{ action.label }}</span>\\r\\n            </a>\\r\\n            <a\\r\\n              mat-menu-item\\r\\n              *ngIf=\\\"action.onRouterLink && action.routerLinkQuery\\\"\\r\\n              [routerLink]=\\\"['/' + action.onRouterLink(row)]\\\"\\r\\n              [queryParams]=\\\"action.routerLinkQuery(row)\\\"\\r\\n            >\\r\\n              <mat-icon>{{ action.icon }}</mat-icon>\\r\\n              <span>{{ action.label }}</span>\\r\\n            </a>\\r\\n          </div>\\r\\n        </mat-menu>\\r\\n      </div>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr\\r\\n    mat-header-row\\r\\n    *matHeaderRowDef=\\\"headerKeysDisplayed\\\"\\r\\n    [hidden]=\\\"config.hideHeader\\\"\\r\\n  ></tr>\\r\\n  <tr\\r\\n    mat-row\\r\\n    *matRowDef=\\\"let row; columns: headerKeysDisplayed\\\"\\r\\n    (click)=\\\"onClickRow($event, row)\\\"\\r\\n    (dblclick)=\\\"onDoubleClickRow($event, row)\\\"\\r\\n    [class.selected-row-multiple]=\\\"selectionMultiple.isSelected(row)\\\"\\r\\n    [class.selected-row-single]=\\\"selectionSingle.isSelected(row)\\\"\\r\\n    [class.has-pointer]=\\\"config.onSelectItem\\\"\\r\\n  ></tr>\\r\\n</table>\\r\\n\\r\\n<mat-toolbar class=\\\"mat-elevation-z8 overflow-hidden\\\">\\r\\n  <mat-toolbar-row *ngIf=\\\"!dataSource || hasNoItems\\\">\\r\\n    <app-toolbar-loader *ngIf=\\\"!dataSource\\\"></app-toolbar-loader>\\r\\n    <h1 *ngIf=\\\"hasNoItems\\\" class=\\\"no-items\\\">No items found</h1>\\r\\n  </mat-toolbar-row>\\r\\n  <mat-toolbar-row class=\\\"paginator-row\\\">\\r\\n    <app-table-csv-export\\r\\n      *ngIf=\\\"exportFilename\\\"\\r\\n      [dataArray]=\\\"exportData\\\"\\r\\n      [filename]=\\\"exportFilename\\\"\\r\\n    ></app-table-csv-export>\\r\\n    <mat-paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\">\\r\\n    </mat-paginator>\\r\\n  </mat-toolbar-row>\\r\\n</mat-toolbar>\\r\\n\",\n                    styles: [\".no-items,app-toolbar-loader{text-align:center;padding:20px;width:100%}.no-items{color:#555}.addRightPixel{width:calc(100% - 1px)}.relative{position:relative}.overflow-hidden{overflow:hidden}.flex-h{display:flex;flex-direction:row}.space-between{justify-content:space-between}.align-center{align-items:center}.auto-elevation{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-paginator{background-color:transparent}.paginator-row{display:flex;align-items:centered;justify-content:space-between;height:unset}mat-toolbar-row{height:unset}.filter-search{margin-top:11px;margin-bottom:-9px;margin-right:20px}.filter-columns{margin-top:11px;margin-bottom:-9px}.bulk-actions{position:absolute;top:0;transition:.7s;width:100%;height:100%}.item-count{padding-left:10px}button{margin-right:10px}.table-header{width:100%}.hidden{top:-70px!important;overflow:hidden!important;height:0}.selected-row-multiple{background-color:#eee9}td{background:unset}.selected-row-single{background-color:#b5deb6bb}.break-words{word-break:break-all}.more-icon:hover{background-color:#d3d3d3;border-radius:20px}\"]\n                }] }\n    ];\n    AutoTableComponent.propDecorators = {\n        selectedBulk: [{ type: Output }],\n        config: [{ type: Input }],\n        columnDefinitions: [{ type: Input }],\n        paginator: [{ type: ViewChild, args: [MatPaginator,] }],\n        sort: [{ type: ViewChild, args: [MatSort,] }]\n    };\n    return AutoTableComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AppTableLoaderComponent = /** @class */ (function () {\n    function AppTableLoaderComponent() {\n    }\n    AppTableLoaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'app-toolbar-loader',\n                    template: \"\\n    <mat-toolbar-row>\\n      <div class=\\\"loader-container is-button-icon\\\">\\n        <div class=\\\"loader-div\\\">\\n          <mat-spinner [diameter]=\\\"40\\\"></mat-spinner>\\n        </div>\\n      </div>\\n    </mat-toolbar-row>\\n  \",\n                    styles: [\"\\n      .loader-container {\\n        width: 100% !important;\\n        display: flex !important;\\n        padding: 0px 0px;\\n        z-index: 100000000;\\n      }\\n      .loader-div {\\n        margin: auto;\\n      }\\n      .loader-container,\\n      .is-button-icon {\\n        display: inline-block;\\n        margin: 0;\\n        margin-bottom: -4px;\\n        margin-right: 5px;\\n      }\\n    \"]\n                }] }\n    ];\n    return AppTableLoaderComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar sharedComponents = [AutoTableComponent, AppTableLoaderComponent];\nvar AutoTableModule = /** @class */ (function () {\n    function AutoTableModule() {\n    }\n    AutoTableModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: __spread(sharedComponents, [AppExportCsvExportComponent]),\n                    exports: sharedComponents,\n                    imports: [\n                        CsvModule,\n                        ReactiveFormsModule,\n                        MatAutocompleteModule,\n                        MatButtonModule,\n                        MatButtonToggleModule,\n                        MatCheckboxModule,\n                        MatFormFieldModule,\n                        MatIconModule,\n                        MatInputModule,\n                        MatMenuModule,\n                        MatPaginatorModule,\n                        MatProgressBarModule,\n                        MatProgressSpinnerModule,\n                        MatSelectModule,\n                        MatSortModule,\n                        MatTableModule,\n                        MatToolbarModule,\n                        CommonModule,\n                        RouterModule,\n                    ]\n                },] }\n    ];\n    return AutoTableModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutoTableModule, AutoTableComponent, AppExportCsvExportComponent as ɵb, AppTableLoaderComponent as ɵa };\n\n//# sourceMappingURL=ngx-auto-table.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from \"@angular/core\";\nimport { AutoTableConfig } from \"ngx-auto-table/public_api\";\nimport { Observable, of } from \"rxjs\";\n\ninterface TestRow {\n  name: string;\n  age: number;\n}\n\nfunction MakeRow(name: string): TestRow {\n  return {\n    name: name,\n    age: Math.round(Math.random() * 25 + 20)\n  };\n}\n\n@Component({\n  selector: \"app-root\",\n  template: `\n    <div style=\"text-align:center\">\n      NGX Auto Table Testing\n    </div>\n\n    <ngx-auto-table\n      [config]=\"config\"\n      [columnDefinitions]=\"{\n        name: {},\n        age: {}\n      }\"\n    ></ngx-auto-table>\n  `\n})\nexport class AppComponent {\n  config: AutoTableConfig<TestRow>;\n  constructor() {\n    const data$ = of([\n      MakeRow(\"Mike\"),\n      MakeRow(\"David\"),\n      MakeRow(\"Frank\"),\n      MakeRow(\"Jess\"),\n      MakeRow(\"Thelma\")\n    ]);\n    this.config = {\n      data$: data$,\n      actionsBulk: [\n        {\n          label: 'Delete',\n          icon: 'delete',\n          onClick: (rows: TestRow[]) => {}\n        }\n      ]\n    };\n  }\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\nimport { AppComponent } from \"./app.component\";\nimport { AutoTableModule } from \"ngx-auto-table\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport {\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCheckboxModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSortModule,\n  MatTableModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatSidenavModule\n} from \"@angular/material\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AutoTableModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    AutoTableModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatSortModule,\n    MatTableModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatSidenavModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}