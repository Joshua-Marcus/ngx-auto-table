{"version":3,"file":"ngx-auto-table-lib.js.map","sources":["ng://ngx-auto-table-lib/components/ngx-auto-table.component.ts","ng://ngx-auto-table-lib/components/app-table-loader.component.ts","ng://ngx-auto-table-lib/components/app-table-csv-export.component.ts","ng://ngx-auto-table-lib/ngx-auto-table.module.ts"],"sourcesContent":["import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnDestroy,\r\n  ViewChild,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nexport interface AutoTableConfig<T> {\r\n  debug: boolean;\r\n  data$: Observable<T[]>;\r\n  filename?: string;\r\n  actions?: ActionDefinition<T>[];\r\n  actionsBulk?: ActionDefinitionBulk<T>[];\r\n  bulkSelectMaxCount?: number;\r\n  onSelectItem?: (row: T) => void;\r\n  onSelectItemDoubleClick?: (row: T) => void;\r\n  clearSelected?: Observable<void>;\r\n  initialSort?: string;\r\n  initialSortDir?: 'asc' | 'desc';\r\n  pageSize?: number;\r\n  hideFields?: string[];\r\n  hideFilter?: boolean;\r\n  hideHeader?: boolean;\r\n  hideChooseColumns?: boolean;\r\n  filterText?: string;\r\n  exportFilename?: string;\r\n  exportRowFormat?: (row: T) => void;\r\n}\r\n\r\nexport interface ActionDefinition<T> {\r\n  label: string;\r\n  icon?: string;\r\n  onClick?: (row: T) => void;\r\n  onRouterLink?: (row: T) => string;\r\n  routerLinkQuery?: (row: T) => {};\r\n}\r\n\r\nexport interface ActionDefinitionBulk<T> {\r\n  label: string;\r\n  icon?: string;\r\n  onClick?: (row: T[]) => void;\r\n}\r\n\r\nexport interface ColumnDefinition {\r\n  header?: string;\r\n  template?: any;\r\n  hide?: boolean;\r\n  forceWrap?: boolean;\r\n}\r\n\r\ninterface ColumnDefinitionInternal extends ColumnDefinition {\r\n  field: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-auto-table',\r\n  templateUrl: './ngx-auto-table.component.html',\r\n  styleUrls: ['./ngx-auto-table.component.scss']\r\n})\r\nexport class AutoTableComponent<T> implements OnInit, OnDestroy {\r\n  @Output()\r\n  selectedBulk = new EventEmitter<T[]>();\r\n  @Input()\r\n  config: AutoTableConfig<T>;\r\n  @Input()\r\n  columnDefinitions: {\r\n    [field: string]: ColumnDefinition;\r\n  } = {};\r\n  columnDefinitionsAll: {\r\n    [field: string]: ColumnDefinition;\r\n  } = {};\r\n  columnDefinitionsAllArray: ColumnDefinitionInternal[] = [];\r\n\r\n  headerKeysAll = [];\r\n  headerKeysAllVisible = [];\r\n  headerKeysDisplayed = [];\r\n  headerKeysDisplayedMap = {};\r\n\r\n  dataSource: MatTableDataSource<any>;\r\n  dataSourceSubscription: Subscription;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  pageSize = 25;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  exportData: any[];\r\n  exportFilename: string;\r\n\r\n  hasNoItems: boolean;\r\n\r\n  filterControl = new FormControl();\r\n  // Bulk items selection\r\n  selectionMultiple = new SelectionModel<any>(true, []);\r\n  selectionSingle = new SelectionModel<any>(false, []);\r\n  clearSelectedSubscription: Subscription;\r\n\r\n  ngOnInit() {\r\n    this.dataSourceSubscription = this.config.data$\r\n      .pipe(filter(e => !!e))\r\n      .subscribe(originalData => {\r\n        console.log('ngx-auto-table, subscribed: ', { originalData });\r\n        this.dataSource = new MatTableDataSource(originalData);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n        if (originalData && !originalData.length) {\r\n          this.hasNoItems = true;\r\n          return;\r\n        } else {\r\n          this.hasNoItems = false;\r\n        }\r\n        if (this.config.pageSize) {\r\n          this.pageSize = this.config.pageSize;\r\n        }\r\n        const firstDataItem = originalData[0];\r\n        this.initDisplayedColumns(firstDataItem);\r\n        this.initExport(originalData);\r\n        this.initFilter(originalData);\r\n      });\r\n\r\n    if (this.config.clearSelected) {\r\n      this.clearSelectedSubscription = this.config.clearSelected.subscribe(\r\n        () => {\r\n          this.log('clearSelected');\r\n          this.selectionMultiple.clear();\r\n          this.selectionSingle.clear();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dataSourceSubscription) {\r\n      this.dataSourceSubscription.unsubscribe();\r\n    }\r\n    if (this.clearSelectedSubscription) {\r\n      this.clearSelectedSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    this.selectionMultiple.clear();\r\n    this.selectionSingle.clear();\r\n  }\r\n\r\n  initFilter(originalData: T[]) {\r\n    if (!originalData.length) {\r\n      return;\r\n    }\r\n    const firstRow = originalData[0];\r\n    const keysData = new Set(Object.keys(firstRow));\r\n    const keysHeader = new Set(this.headerKeysDisplayed);\r\n    keysHeader.delete('__bulk');\r\n    keysHeader.delete('__star');\r\n    const allFieldsExist = Array.from(keysHeader).reduce((acc, cur) => {\r\n      return keysData.has(cur) && acc;\r\n    }, true);\r\n\r\n    this.log('initFilter()', {\r\n      rowFields: keysData,\r\n      allFieldsExist,\r\n      headerKeysDisplayed: this.headerKeysDisplayed\r\n    });\r\n    this.dataSource.filterPredicate = (data: T, filterText: string) => {\r\n      if (!filterText) {\r\n        return true;\r\n      }\r\n      if (!allFieldsExist) {\r\n        const lower = JSON.stringify(data).toLowerCase();\r\n        return lower.includes(filterText);\r\n      }\r\n      for (const key of Array.from(keysHeader)) {\r\n        const dataVal = data[key];\r\n        const str = JSON.stringify(dataVal);\r\n        const isFound = str.toLowerCase().includes(filterText);\r\n        if (isFound) {\r\n          return true;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  initExport(originalData: T[]) {\r\n    this.exportFilename = this.config.exportFilename;\r\n    if (!this.exportFilename) {\r\n      return;\r\n    }\r\n    this.exportData = originalData.map(dataItem => {\r\n      if (!this.config.exportRowFormat) {\r\n        return dataItem;\r\n      }\r\n      return this.config.exportRowFormat(dataItem);\r\n    });\r\n  }\r\n\r\n  public getKeyHeader(key: string) {\r\n    const inputDef = this.columnDefinitions[key];\r\n    if (inputDef && inputDef.header != null) {\r\n      return inputDef.header;\r\n    }\r\n    return this.toTitleCase(key);\r\n  }\r\n\r\n  private toTitleCase(str) {\r\n    return str.replace('_', ' ').replace(/\\w\\S*/g, function(txt) {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n  }\r\n\r\n  initDisplayedColumns(firstDataItem: T) {\r\n    this.initColumnDefinitions(firstDataItem);\r\n\r\n    this.headerKeysAll = Object.keys(this.columnDefinitionsAll);\r\n    this.headerKeysAllVisible = this.headerKeysAll;\r\n    if (this.config.hideFields) {\r\n      // Hide fields if specified\r\n      const hideFields = new Set(this.config.hideFields);\r\n      this.headerKeysAllVisible = this.headerKeysAll.filter(\r\n        x => !hideFields.has(x)\r\n      );\r\n    }\r\n\r\n    const displayed = this.columnDefinitionsAllArray\r\n      .filter(def => !def.hide)\r\n      .map(d => d.field);\r\n\r\n    this.setDisplayedColumns(displayed);\r\n    // Set currently enabled items\r\n    this.filterControl.setValue(this.headerKeysDisplayed);\r\n  }\r\n\r\n  initColumnDefinitions(firstDataItem: T) {\r\n    // Set all column defintions, which were explicitly set in config\r\n    const inputDefintionFields = Object.keys(this.columnDefinitions);\r\n    inputDefintionFields.forEach((field: string) => {\r\n      const inputDefintion = this.columnDefinitions[field];\r\n      this.columnDefinitionsAll[field] = {\r\n        header: this.getKeyHeader(field),\r\n        template: inputDefintion.template,\r\n        hide: inputDefintion.hide,\r\n        forceWrap: inputDefintion.forceWrap\r\n      };\r\n    });\r\n\r\n    // Set all column defintions read from the \"input data\"\r\n    const inputDataKeys = Object.keys(firstDataItem);\r\n    inputDataKeys.forEach((field: string) => {\r\n      if (!!this.columnDefinitionsAll[field]) {\r\n        // skip if definition exists\r\n        return;\r\n      }\r\n      this.columnDefinitionsAll[field] = {\r\n        header: this.toTitleCase(field),\r\n        hide: true\r\n      };\r\n    });\r\n\r\n    this.columnDefinitionsAllArray = Object.keys(this.columnDefinitionsAll).map(\r\n      k => {\r\n        return {\r\n          ...this.columnDefinitionsAll[k],\r\n          field: k\r\n        };\r\n      }\r\n    );\r\n    this.log('initColumnDefinitions', {\r\n      firstDataItem,\r\n      inputDefintionFields\r\n    });\r\n  }\r\n\r\n  // Sets the displayed columns from a set of fieldnames\r\n  setDisplayedColumns(selected: string[]) {\r\n    // Initialize all keys as false\r\n    this.headerKeysAllVisible.forEach(\r\n      k => (this.headerKeysDisplayedMap[k] = false)\r\n    );\r\n    // Set selected as true\r\n    selected.forEach(c => (this.headerKeysDisplayedMap[c] = true));\r\n    this.headerKeysDisplayed = Object.keys(this.headerKeysDisplayedMap).filter(\r\n      k => this.headerKeysDisplayedMap[k]\r\n    );\r\n    // Add bulk select column at start\r\n    if (this.config.actionsBulk) {\r\n      this.headerKeysDisplayed.unshift('__bulk');\r\n    }\r\n    // Add actions column at end\r\n    if (this.config.actions) {\r\n      this.headerKeysDisplayed.push('__star');\r\n    }\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selectionMultiple.selected.length;\r\n    const numRows =\r\n      this.config.bulkSelectMaxCount || this.dataSource.filteredData.length;\r\n    return numSelected >= numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selectionMultiple.clear()\r\n      : this.selectAll();\r\n    this.selectedBulk.emit(this.selectionMultiple.selected);\r\n  }\r\n\r\n  private selectAll() {\r\n    this.dataSource.sortData(this.dataSource.filteredData, this.dataSource.sort);\r\n    let cutArray = this.dataSource.filteredData;\r\n    if (this.config.bulkSelectMaxCount) {\r\n      cutArray = this.dataSource.filteredData.slice(0, this.config.bulkSelectMaxCount);\r\n    }\r\n    cutArray.forEach(row => {\r\n      this.selectionMultiple.select(row);\r\n    });\r\n  }\r\n\r\n  isMaxReached() {\r\n    if (!this.config.bulkSelectMaxCount) {\r\n      return false;\r\n    }\r\n    return (\r\n      this.selectionMultiple.selected.length >= this.config.bulkSelectMaxCount\r\n    );\r\n  }\r\n\r\n  onColumnFilterChange($event) {\r\n    console.log({ $event });\r\n    const selectedValues = this.filterControl.value;\r\n    this.setDisplayedColumns(selectedValues);\r\n    this.initFilter(this.dataSource.data);\r\n  }\r\n\r\n  onClickBulkItem($event, item) {\r\n    if ($event) {\r\n      const isSelected = this.selectionMultiple.isSelected(item);\r\n      if (!this.isMaxReached()) {\r\n        this.selectionMultiple.toggle(item);\r\n      } else {\r\n        if (isSelected) {\r\n          this.selectionMultiple.deselect(item);\r\n        } else {\r\n          this.warn(\r\n            `Max Selection of \"${this.config.bulkSelectMaxCount}\" Reached`\r\n          );\r\n        }\r\n      }\r\n      this.selectedBulk.emit(this.selectionMultiple.selected);\r\n    }\r\n  }\r\n\r\n  onClickRow($event, row: T) {\r\n    if (this.config.onSelectItem) {\r\n      this.log('onClickRow()', { $event, row });\r\n      this.selectionSingle.select(row);\r\n      this.config.onSelectItem(row);\r\n    }\r\n  }\r\n\r\n  onDoubleClickRow($event, row: T) {\r\n    if (this.config.onSelectItemDoubleClick) {\r\n      this.log('onDoubleClickRow()', { $event, row });\r\n      this.selectionSingle.select(row);\r\n      this.config.onSelectItemDoubleClick(row);\r\n    }\r\n  }\r\n\r\n  async onClickBulkAction(action: ActionDefinitionBulk<T>) {\r\n    await action.onClick(this.selectionMultiple.selected);\r\n    this.selectionMultiple.clear();\r\n  }\r\n\r\n  log(str: string, obj?: any) {\r\n    if (this.config.debug) {\r\n      console.log('<ngx-auto-table> : ' + str, obj);\r\n    }\r\n  }\r\n\r\n  warn(msg: string) {}\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-toolbar-loader',\r\n  template: `\r\n    <mat-toolbar-row>\r\n      <div class=\"loader-container is-button-icon\">\r\n        <div class=\"loader-div\">\r\n          <mat-spinner [diameter]=\"40\"></mat-spinner>\r\n        </div>\r\n      </div>\r\n    </mat-toolbar-row>\r\n  `,\r\n  styles: [\r\n    `\r\n      .loader-container {\r\n        width: 100% !important;\r\n        display: flex !important;\r\n        padding: 0px 0px;\r\n        z-index: 100000000;\r\n      }\r\n      .loader-div {\r\n        margin: auto;\r\n      }\r\n      .loader-container,\r\n      .is-button-icon {\r\n        display: inline-block;\r\n        margin: 0;\r\n        margin-bottom: -4px;\r\n        margin-right: 5px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class AppTableLoaderComponent {}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-table-csv-export',\r\n  template: `\r\n    <a\r\n      *ngIf=\"dataArray\"\r\n      csvLink\r\n      [data]=\"dataArray\"\r\n      [filename]=\"filename\"\r\n      mat-raised-button\r\n    >\r\n      <mat-icon title=\"Export as CSV\">file_download</mat-icon>\r\n      <span>Export CSV</span>\r\n    </a>\r\n  `,\r\n  styles: [\r\n    `\r\n      a {\r\n        color: black;\r\n      }\r\n      mat-icon {\r\n        padding-right: 5px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class AppExportCsvExportComponent {\r\n  @Input()\r\n  dataArray: [];\r\n  @Input()\r\n  filename: string;\r\n}\r\n","// Angular\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { AutoTableComponent } from './components/ngx-auto-table.component';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatPaginatorModule,\r\n  MatCheckboxModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatSelectModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatToolbarModule,\r\n  MatMenuModule\r\n} from '@angular/material';\r\n\r\nimport { AppTableLoaderComponent } from './components/app-table-loader.component';\r\nimport { CsvModule } from '@ctrl/ngx-csv';\r\nimport { AppExportCsvExportComponent } from './components/app-table-csv-export.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nconst sharedComponents = [AutoTableComponent, AppTableLoaderComponent];\r\n\r\n@NgModule({\r\n  declarations: [...sharedComponents, AppExportCsvExportComponent],\r\n  exports: sharedComponents,\r\n  imports: [\r\n    CsvModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatToolbarModule,\r\n    CommonModule,\r\n    RouterModule,\r\n  ]\r\n})\r\nexport class AutoTableModule {}\r\n"],"names":["tslib_1.__values"],"mappings":"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"}
